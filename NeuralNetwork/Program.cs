using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NeuralNetwork {
    class Program {
        static readonly bool debugMode = false;

        // Size of input vector
        static readonly int dIn = 2;
        // Size of hidden layer
        static readonly int d1 = 3;
        // Size of output vector
        static readonly int dOut = 1;
        // Weights matrix between input and hidden layer
        static double[] W1 = new double[dIn * d1];
        // Weights change matrix for batch update mode
        static double[] W1ChangeCache = initW1ChangeCache();
        // Bias between input and hidden layer
        static double[] b1 = new double[d1];
        // Bias change vector for batch update mode
        static double[] b1ChangeCache = initB1ChangeCache();
        // Weights matrix between hidden layer and output
        static double[] W2 = initW2ChangeCache();
        // Weights change matrix for batch update mode
        static double[] W2ChangeCache = new double[d1 * dOut];
        // Bias between hidden layer and output
        static double[] b2 = new double[dOut];
        // Bias change vector for batch update mode
        static double[] b2ChangeCache = initB2ChangeCache();
        // Output values of the hidden layer neurons
        static double[] hiddenLayerOutput;

        // How many times should we train the whole training set?
        static readonly int epochs = 2000;
        //static readonly double errorTarget = 0.01;
        // Learning rate / alpha
        static readonly double learningRate = 1;

        static void Main(string[] args) {
            train();
        }

        private static void train() {
            // x1, x2, y
            // Activation function leads to all output being
            // <= 1, so we can currently only learn stuff
            // with results <= 1.
            double[] trainingData = new double[] {
                0.03, 0.13, 0.16,
                0.03, 0.21, 0.24,
                0.25, 0.39, 0.64,
                0.56, 0.32, 0.88,
                0.14, 0.44, 0.58,
                0.28, 0.71, 0.99,
                0.48, 0.14, 0.62,
                0.37, 0.11, 0.48,
                0.29, 0.04, 0.33,
                0.1, 0.05, 0.15,
                0.63, 0.06, 0.69,
                0.45, 0.1, 0.55,
                0.77, 0.05, 0.82,
                0.25, 0.31, 0.56,
                0.03, 0.0, 0.03,
                0.46, 0.46, 0.92,
                0.06, 0.77, 0.83,
                0.28, 0.01, 0.29,
                0.07, 0.52, 0.59,
                0.61, 0.26, 0.87,
                0.11, 0.15, 0.26,
                0.01, 0.35, 0.36,
                0.0, 0.81, 0.81,
                0.2, 0.64, 0.84,
                0.01, 0.59, 0.60,
                0.17, 0.18, 0.35,
                0.11, 0.7, 0.81,
                0.75, 0.13, 0.88,
                0.4, 0.39, 0.79,
                0.4, 0.51, 0.91,
                0.26, 0.46, 0.72,
                0.26, 0.66, 0.92,
                0.38, 0.08, 0.46,
                0.08, 0.59, 0.67,
                0.02, 0.53, 0.55,
                0.36, 0.56, 0.92,
                0.39, 0.17, 0.56,
                0.08, 0.82, 0.90,
                0.19, 0.79, 0.98,
                0.4, 0.01, 0.41,
                0.18, 0.37, 0.55,
                0.97, 0.0, 0.97,
                0.65, 0.17, 0.82,
                0.41, 0.35, 0.76,
                0.1, 0.18, 0.28,
                0.81, 0.17, 0.98,
                0.18, 0.75, 0.93,
                0.3, 0.39, 0.69,
                0.47, 0.32, 0.79,
                0.09, 0.57, 0.66,
                0.26, 0.48, 0.74,
                0.13, 0.04, 0.17,
                0.31, 0.48, 0.79,
                0.54, 0.21, 0.75,
                0.35, 0.46, 0.81,
                0.34, 0.43, 0.77,
                0.29, 0.4, 0.69,
                0.27, 0.05, 0.32,
                0.56, 0.38, 0.94,
                0.34, 0.43, 0.77,
                0.3, 0.56, 0.86,
                0.02, 0.45, 0.47,
                0.34, 0.18, 0.52,
                0.07, 0.24, 0.31,
                0.24, 0.08, 0.32,
                0.32, 0.05, 0.37,
                0.41, 0.16, 0.57,
                0.12, 0.3, 0.42,
                0.51, 0.41, 0.92,
                0.01, 0.41, 0.42,
                0.54, 0.11, 0.65,
                0.54, 0.24, 0.78,
                0.94, 0.04, 0.98,
                0.56, 0.15, 0.71,
                0.16, 0.45, 0.61,
                0.59, 0.21, 0.80,
                0.71, 0.03, 0.74,
                0.43, 0.25, 0.68,
                0.17, 0.16, 0.33,
                0.01, 0.41, 0.42,
                0.79, 0.02, 0.81,
                0.42, 0.16, 0.58,
                0.36, 0.45, 0.81,
                0.49, 0.34, 0.83,
                0.17, 0.34, 0.51,
                0.29, 0.31, 0.60,
                0.62, 0.11, 0.73,
                0.52, 0.01, 0.53,
                0.37, 0.36, 0.73,
                0.15, 0.77, 0.92,
                0.21, 0.16, 0.37,
                0.06, 0.79, 0.85,
                0.36, 0.16, 0.52,
                0.36, 0.29, 0.65,
                0.47, 0.1, 0.57,
                0.33, 0.6, 0.93,
                0.32, 0.63, 0.95,
                0.41, 0.32, 0.73,
                0.29, 0.66, 0.95,
                0.53, 0.23, 0.76,
                0.04, 0.45, 0.49,
                0.33, 0.25, 0.58,
                0.64, 0.21, 0.85,
                0.65, 0.07, 0.72,
                0.72, 0.25, 0.97,
                0.6, 0.34, 0.94,
                0.29, 0.03, 0.32,
                0.05, 0.01, 0.06,
                0.06, 0.02, 0.08,
                0.44, 0.11, 0.55,
                0.42, 0.14, 0.56,
                0.02, 0.06, 0.08,
                0.15, 0.6, 0.75,
                0.6, 0.08, 0.68,
                0.84, 0.03, 0.87,
                0.64, 0.28, 0.92,
                0.02, 0.16, 0.18,
                0.09, 0.61, 0.70,
                0.71, 0.12, 0.83,
                0.04, 0.58, 0.62,
                0.03, 0.41, 0.44,
                0.23, 0.48, 0.71,
                0.34, 0.32, 0.66,
                0.24, 0.12, 0.36,
                0.27, 0.27, 0.54,
                0.25, 0.18, 0.43,
                0.17, 0.73, 0.90,
                0.18, 0.42, 0.60,
                0.43, 0.16, 0.59,
                0.12, 0.3, 0.42,
                0.34, 0.38, 0.72,
                0.16, 0.2, 0.36,
                0.89, 0.07, 0.96,
                0.45, 0.26, 0.71,
                0.18, 0.4, 0.58,
                0.62, 0.28, 0.90,
                0.59, 0.05, 0.64,
                0.34, 0.47, 0.81,
                0.3, 0.45, 0.75,
                0.05, 0.47, 0.52,
                0.7, 0.23, 0.93,
                0.88, 0.01, 0.89,
                0.91, 0.03, 0.94,
                0.28, 0.34, 0.62,
                0.32, 0.45, 0.77,
                0.55, 0.13, 0.68,
                0.06, 0.67, 0.73,
                0.07, 0.79, 0.86,
                0.09, 0.35, 0.44,
                0.04, 0.27, 0.31,
                0.57, 0.08, 0.65,
                0.11, 0.25, 0.36,
                0.52, 0.04, 0.56,
                0.28, 0.32, 0.60,
                0.61, 0.25, 0.86,
                0.16, 0.33, 0.49,
                0.16, 0.76, 0.92,
                0.54, 0.04, 0.58,
                0.42, 0.49, 0.91,
                0.12, 0.05, 0.17,
                0.04, 0.31, 0.35,
                0.8, 0.15, 0.95,
                0.13, 0.17, 0.30,
                0.74, 0.14, 0.88,
                0.28, 0.57, 0.85,
                0.0, 0.1, 0.10,
                0.1, 0.65, 0.75,
                0.7, 0.2, 0.90,
                0.44, 0.41, 0.85,
                0.64, 0.03, 0.67,
                0.4, 0.11, 0.51,
                0.33, 0.66, 0.99,
                0.46, 0.17, 0.63,
                0.09, 0.11, 0.20,
                0.05, 0.79, 0.84,
                0.29, 0.21, 0.50,
                0.01, 0.48, 0.49,
                0.3, 0.32, 0.62,
                0.02, 0.88, 0.90,
                0.29, 0.64, 0.93,
                0.3, 0.08, 0.38,
                0.13, 0.67, 0.80,
                0.43, 0.39, 0.82,
                0.14, 0.52, 0.66,
                0.11, 0.18, 0.29,
                0.27, 0.52, 0.79,
                0.23, 0.42, 0.65,
                0.87, 0.05, 0.92,
                0.29, 0.62, 0.91,
                0.58, 0.31, 0.89,
                0.39, 0.3, 0.69,
                0.19, 0.42, 0.61,
                0.14, 0.02, 0.16,
                0.0, 0.8, 0.80,
                0.07, 0.39, 0.46,
                0.0, 0.12, 0.12,
                0.07, 0.14, 0.21,
                0.49, 0.25, 0.74,
                0.1, 0.17, 0.27,
                0.39, 0.54, 0.93,
                0.97, 0.02, 0.99,
                0.24, 0.15, 0.39,
                0.19, 0.08, 0.27,
                0.58, 0.22, 0.80,
                0.11, 0.69, 0.80,
                0.44, 0.15, 0.59,
                0.64, 0.34, 0.98,
                0.63, 0.1, 0.73,
                0.38, 0.24, 0.62,
                0.12, 0.25, 0.37,
                0.07, 0.4, 0.47,
                0.14, 0.13, 0.27,
                0.26, 0.25, 0.51,
                0.44, 0.36, 0.80,
                0.11, 0.41, 0.52,
                0.15, 0.77, 0.92,
                0.14, 0.53, 0.67,
                0.65, 0.32, 0.97,
                0.89, 0.07, 0.96,
                0.04, 0.18, 0.22,
                0.16, 0.68, 0.84,
                0.2, 0.36, 0.56,
                0.12, 0.54, 0.66,
                0.91, 0.01, 0.92,
                0.78, 0.13, 0.91,
                0.09, 0.76, 0.85,
                0.15, 0.78, 0.93,
                0.51, 0.47, 0.98,
                0.14, 0.45, 0.59,
                0.25, 0.43, 0.68,
                0.67, 0.13, 0.80,
                0.11, 0.71, 0.82,
                0.17, 0.08, 0.25,
                0.15, 0.51, 0.66,
                0.18, 0.53, 0.71,
                0.86, 0.04, 0.90,
                0.32, 0.22, 0.54,
                0.16, 0.55, 0.71,
                0.05, 0.17, 0.22,
                0.21, 0.66, 0.87,
                0.3, 0.53, 0.83,
                0.84, 0.1, 0.94,
                0.29, 0.08, 0.37,
                0.34, 0.16, 0.50,
                0.3, 0.06, 0.36,
                0.35, 0.07, 0.42,
                0.16, 0.17, 0.33,
                0.48, 0.36, 0.84,
                0.74, 0.25, 0.99,
                0.33, 0.47, 0.80,
                0.31, 0.37, 0.68,
                0.8, 0.04, 0.84,
                0.04, 0.01, 0.05,
                0.69, 0.14, 0.83,
                0.67, 0.15, 0.82,
                0.52, 0.11, 0.63,
                0.67, 0.06, 0.73,
                0.52, 0.36, 0.88,
                0.71, 0.13, 0.84,
                0.42, 0.09, 0.51,
                0.8, 0.17, 0.97,
                0.0, 0.64, 0.64,
                0.21, 0.2, 0.41,
                0.32, 0.19, 0.51,
                0.11, 0.11, 0.22,
                0.01, 0.84, 0.85,
                0.14, 0.01, 0.15,
                0.49, 0.49, 0.98,
                0.41, 0.18, 0.59,
                0.36, 0.15, 0.51,
                0.11, 0.0, 0.11,
                0.32, 0.23, 0.55,
                0.07, 0.35, 0.42,
                0.7, 0.29, 0.99,
                0.21, 0.53, 0.74,
                0.23, 0.04, 0.27,
                0.13, 0.47, 0.60,
                0.18, 0.77, 0.95,
                0.0, 0.74, 0.74,
                0.48, 0.4, 0.88,
                0.18, 0.69, 0.87,
                0.16, 0.66, 0.82,
                0.81, 0.03, 0.84,
                0.6, 0.14, 0.74,
                0.09, 0.09, 0.18,
                0.17, 0.33, 0.50,
                0.22, 0.28, 0.50,
                0.09, 0.5, 0.59,
                0.41, 0.42, 0.83,
                0.48, 0.32, 0.80,
                0.26, 0.1, 0.36,
                0.32, 0.61, 0.93,
                0.5, 0.21, 0.71,
                0.21, 0.63, 0.84,
                0.44, 0.04, 0.48,
                0.11, 0.81, 0.92,
                0.21, 0.23, 0.44,
                0.01, 0.73, 0.74,
                0.44, 0.34, 0.78,
                0.8, 0.07, 0.87,
                0.03, 0.42, 0.45,
                0.45, 0.35, 0.80,
                0.09, 0.37, 0.46,
                0.23, 0.6, 0.83,
                0.3, 0.28, 0.58,
                0.12, 0.16, 0.28,
                0.2, 0.58, 0.78,
                0.07, 0.16, 0.23,
                0.52, 0.24, 0.76,
                0.32, 0.07, 0.39,
                0.05, 0.28, 0.33,
                0.12, 0.69, 0.81,
                0.15, 0.54, 0.69,
                0.27, 0.37, 0.64,
                0.49, 0.08, 0.57,
                0.88, 0.02, 0.90,
                0.29, 0.03, 0.32,
                0.53, 0.23, 0.76,
                0.45, 0.13, 0.58,
                0.65, 0.09, 0.74,
                0.08, 0.83, 0.91,
                0.35, 0.02, 0.37,
                0.04, 0.72, 0.76,
                0.03, 0.45, 0.48,
                0.17, 0.27, 0.44,
                0.49, 0.16, 0.65,
                0.05, 0.73, 0.78,
                0.05, 0.34, 0.39,
                0.16, 0.0, 0.16,
                0.43, 0.44, 0.87,
                0.4, 0.04, 0.44,
                0.36, 0.18, 0.54,
                0.79, 0.11, 0.90,
                0.32, 0.52, 0.84,
                0.08, 0.3, 0.38,
                0.63, 0.25, 0.88,
                0.35, 0.18, 0.53,
                0.05, 0.92, 0.97,
                0.77, 0.07, 0.84,
                0.55, 0.13, 0.68,
                0.2, 0.24, 0.44,
                0.39, 0.03, 0.42,
                0.39, 0.26, 0.65,
                0.27, 0.7, 0.97,
                0.17, 0.67, 0.84,
                0.74, 0.14, 0.88,
                0.07, 0.49, 0.56,
                0.32, 0.26, 0.58,
                0.04, 0.88, 0.92,
                0.56, 0.41, 0.97,
                0.04, 0.46, 0.50,
                0.62, 0.29, 0.91,
                0.21, 0.11, 0.32,
                0.24, 0.21, 0.45,
                0.09, 0.03, 0.12,
                0.04, 0.46, 0.50,
                0.18, 0.44, 0.62,
                0.43, 0.14, 0.57,
                0.02, 0.82, 0.84,
                0.34, 0.31, 0.65,
                0.38, 0.17, 0.55,
                0.34, 0.13, 0.47,
                0.31, 0.46, 0.77,
                0.0, 0.74, 0.74,
                0.73, 0.11, 0.84,
                0.21, 0.45, 0.66,
                0.77, 0.22, 0.99,
                0.38, 0.26, 0.64,
                0.57, 0.21, 0.78,
                0.29, 0.61, 0.90,
                0.03, 0.71, 0.74,
                0.39, 0.36, 0.75,
                0.68, 0.22, 0.90,
                0.64, 0.0, 0.64,
                0.23, 0.06, 0.29,
                0.41, 0.02, 0.43,
                0.23, 0.06, 0.29,
                0.36, 0.51, 0.87,
                0.54, 0.19, 0.73,
                0.11, 0.28, 0.39,
                0.81, 0.01, 0.82,
                0.03, 0.81, 0.84,
                0.17, 0.21, 0.38,
                0.1, 0.38, 0.48,
                0.1, 0.51, 0.61,
                0.01, 0.67, 0.68,
                0.87, 0.11, 0.98,
                0.47, 0.2, 0.67,
                0.15, 0.33, 0.48,
                0.48, 0.24, 0.72,
                0.21, 0.41, 0.62,
                0.43, 0.06, 0.49,
                0.68, 0.15, 0.83,
                0.55, 0.19, 0.74,
                0.32, 0.55, 0.87,
                0.61, 0.37, 0.98,
                0.23, 0.28, 0.51,
                0.15, 0.39, 0.54,
                0.09, 0.32, 0.41,
                0.87, 0.08, 0.95,
                0.04, 0.07, 0.11,
                0.41, 0.36, 0.77,
                0.14, 0.66, 0.80,
                0.69, 0.3, 0.99,
                0.07, 0.74, 0.81,
                0.07, 0.47, 0.54,
                0.0, 0.52, 0.52,
                0.16, 0.74, 0.90,
                0.5, 0.12, 0.62,
                0.04, 0.02, 0.06,
                0.28, 0.32, 0.60,
                0.82, 0.01, 0.83,
                0.79, 0.1, 0.89,
                0.4, 0.07, 0.47,
                0.21, 0.28, 0.49,
                0.66, 0.28, 0.94,
                0.36, 0.55, 0.91,
                0.52, 0.08, 0.60,
                0.01, 0.88, 0.89,
                0.68, 0.08, 0.76,
                0.18, 0.06, 0.24,
                0.67, 0.06, 0.73,
                0.08, 0.78, 0.86,
                0.08, 0.6, 0.68,
                0.65, 0.27, 0.92,
                0.36, 0.35, 0.71,
                0.3, 0.54, 0.84,
                0.16, 0.27, 0.43,
                0.02, 0.38, 0.40,
                0.57, 0.18, 0.75,
                0.3, 0.63, 0.93,
                0.6, 0.06, 0.66,
                0.93, 0.04, 0.97,
                0.38, 0.35, 0.73,
                0.02, 0.89, 0.91,
                0.57, 0.39, 0.96,
                0.08, 0.25, 0.33,
                0.07, 0.48, 0.55,
                0.35, 0.6, 0.95,
                0.42, 0.34, 0.76,
                0.13, 0.53, 0.66,
                0.44, 0.45, 0.89,
                0.66, 0.05, 0.71,
                0.64, 0.28, 0.92,
                0.27, 0.33, 0.60,
                0.75, 0.1, 0.85,
                0.54, 0.01, 0.55,
                0.06, 0.24, 0.30,
                0.31, 0.17, 0.48,
                0.34, 0.2, 0.54,
                0.73, 0.22, 0.95,
                0.1, 0.86, 0.96,
                0.0, 0.32, 0.32,
                0.2, 0.34, 0.54,
                0.15, 0.6, 0.75,
                0.13, 0.71, 0.84,
                0.13, 0.48, 0.61,
                0.46, 0.37, 0.83,
                0.67, 0.01, 0.68,
                0.62, 0.06, 0.68,
                0.14, 0.32, 0.46,
                0.04, 0.38, 0.42,
                0.3, 0.49, 0.79,
                0.64, 0.24, 0.88,
                0.0, 0.65, 0.65,
                0.39, 0.16, 0.55,
                0.1, 0.65, 0.75,
                0.37, 0.17, 0.54,
                0.17, 0.74, 0.91,
                0.54, 0.27, 0.81,
                0.84, 0.03, 0.87,
                0.02, 0.64, 0.66,
                0.61, 0.23, 0.84,
                0.04, 0.24, 0.28,
                0.37, 0.41, 0.78,
                0.47, 0.15, 0.62,
                0.17, 0.54, 0.71,
                0.19, 0.39, 0.58,
                0.3, 0.66, 0.96,
                0.56, 0.43, 0.99,
                0.43, 0.04, 0.47,
                0.17, 0.75, 0.92,
                0.21, 0.11, 0.32,
                0.45, 0.49, 0.94,
                0.35, 0.07, 0.42,
                0.53, 0.37, 0.90,
                0.24, 0.02, 0.26,
                0.27, 0.17, 0.44,
                0.44, 0.38, 0.82,
                0.09, 0.76, 0.85,
                0.04, 0.48, 0.52,
                0.03, 0.11, 0.14,
                0.03, 0.63, 0.66,
                0.82, 0.17, 0.99,
                0.01, 0.02, 0.03,
                0.27, 0.02, 0.29,
                0.34, 0.33, 0.67,
                0.38, 0.3, 0.68,
                0.19, 0.35, 0.54,
                0.52, 0.04, 0.56,
                0.38, 0.2, 0.58,
                0.1, 0.17, 0.27,
                0.24, 0.18, 0.42,
                0.43, 0.5, 0.93,
                0.4, 0.43, 0.83,
                0.11, 0.03, 0.14,
                0.26, 0.67, 0.93,
                0.1, 0.16, 0.26,
                0.12, 0.22, 0.34,
                0.01, 0.65, 0.66,
                0.19, 0.79, 0.98,
                0.23, 0.44, 0.67,
                0.11, 0.51, 0.62,
                0.23, 0.52, 0.75,
                0.05, 0.49, 0.54,
                0.02, 0.34, 0.36,
                0.05, 0.05, 0.10,
                0.22, 0.36, 0.58,
                0.64, 0.32, 0.96,
                0.01, 0.3, 0.31,
                0.0, 0.97, 0.97,
                0.12, 0.85, 0.97,
                0.03, 0.65, 0.68,
                0.13, 0.38, 0.51,
                0.01, 0.87, 0.88,
                0.04, 0.54, 0.58,
                0.77, 0.05, 0.82,
                0.03, 0.2, 0.23,
                0.4, 0.4, 0.80,
                0.13, 0.67, 0.80,
                0.35, 0.41, 0.76,
                0.5, 0.0, 0.50,
                0.23, 0.4, 0.63,
                0.01, 0.46, 0.47,
                0.82, 0.13, 0.95,
                0.29, 0.37, 0.66,
                0.57, 0.25, 0.82,
                0.25, 0.41, 0.66,
                0.02, 0.14, 0.16,
                0.15, 0.48, 0.63,
                0.39, 0.57, 0.96,
                0.09, 0.83, 0.92,
                0.08, 0.09, 0.17,
                0.48, 0.0, 0.48,
                0.45, 0.22, 0.67,
                0.17, 0.4, 0.57,
                0.16, 0.45, 0.61,
                0.15, 0.27, 0.42,
                0.24, 0.35, 0.59,
                0.91, 0.02, 0.93,
                0.67, 0.27, 0.94,
                0.1, 0.6, 0.70,
                0.41, 0.14, 0.55,
                0.01, 0.22, 0.23,
                0.64, 0.06, 0.70,
                0.14, 0.49, 0.63,
                0.16, 0.55, 0.71,
                0.18, 0.15, 0.33,
                0.39, 0.21, 0.60,
                0.04, 0.91, 0.95,
                0.35, 0.43, 0.78,
                0.76, 0.01, 0.77,
                0.69, 0.29, 0.98,
                0.49, 0.2, 0.69,
                0.13, 0.65, 0.78,
                0.18, 0.03, 0.21,
                0.02, 0.74, 0.76,
                0.77, 0.04, 0.81,
                0.01, 0.32, 0.33,
                0.32, 0.58, 0.90,
                0.28, 0.32, 0.60,
                0.0, 0.1, 0.10,
                0.1, 0.23, 0.33,
                0.81, 0.01, 0.82,
                0.39, 0.25, 0.64,
                0.31, 0.57, 0.88,
                0.31, 0.41, 0.72,
                0.02, 0.14, 0.16,
                0.22, 0.24, 0.46,
                0.51, 0.01, 0.52,
                0.25, 0.54, 0.79,
                0.41, 0.35, 0.76,
                0.12, 0.41, 0.53,
                0.57, 0.12, 0.69,
                0.34, 0.35, 0.69,
                0.46, 0.12, 0.58,
                0.19, 0.56, 0.75,
                0.01, 0.43, 0.44,
                0.05, 0.6, 0.65,
                0.38, 0.13, 0.51,
                0.13, 0.33, 0.46,
                0.26, 0.08, 0.34,
                0.79, 0.18, 0.97,
                0.08, 0.75, 0.83,
                0.44, 0.36, 0.80,
                0.11, 0.14, 0.25,
                0.52, 0.39, 0.91,
                0.36, 0.13, 0.49,
                0.24, 0.13, 0.37,
                0.23, 0.21, 0.44,
                0.45, 0.16, 0.61,
                0.93, 0.02, 0.95,
                0.54, 0.03, 0.57,
                0.31, 0.5, 0.81,
                0.01, 0.02, 0.03,
                0.45, 0.03, 0.48,
                0.4, 0.59, 0.99,
                0.26, 0.18, 0.44,
                0.04, 0.33, 0.37,
                0.05, 0.68, 0.73,
                0.06, 0.85, 0.91,
                0.0, 0.42, 0.42,
                0.61, 0.1, 0.71,
                0.52, 0.38, 0.90,
                0.43, 0.28, 0.71,
                0.59, 0.34, 0.93,
                0.36, 0.52, 0.88,
                0.68, 0.17, 0.85,
                0.09, 0.54, 0.63,
                0.06, 0.91, 0.97,
                0.11, 0.79, 0.90,
                0.25, 0.22, 0.47,
                0.31, 0.38, 0.69,
                0.53, 0.21, 0.74,
                0.03, 0.56, 0.59,
                0.61, 0.11, 0.72,
                0.62, 0.01, 0.63,
                0.38, 0.41, 0.79,
                0.71, 0.0, 0.71,
                0.77, 0.15, 0.92,
                0.51, 0.4, 0.91,
                0.74, 0.14, 0.88,
                0.38, 0.11, 0.49,
                0.41, 0.08, 0.49,
                0.88, 0.07, 0.95,
                0.59, 0.13, 0.72,
                0.7, 0.19, 0.89,
                0.19, 0.68, 0.87,
                0.26, 0.08, 0.34,
                0.75, 0.1, 0.85,
                0.32, 0.2, 0.52,
                0.23, 0.34, 0.57,
                0.06, 0.41, 0.47,
                0.6, 0.23, 0.83,
                0.13, 0.05, 0.18,
                0.12, 0.19, 0.31,
                0.4, 0.28, 0.68,
                0.13, 0.18, 0.31,
                0.86, 0.08, 0.94,
                0.35, 0.29, 0.64,
                0.04, 0.44, 0.48,
                0.25, 0.1, 0.35,
                0.55, 0.43, 0.98,
                0.09, 0.42, 0.51,
                0.65, 0.05, 0.70,
                0.66, 0.31, 0.97,
                0.35, 0.49, 0.84,
                0.31, 0.64, 0.95,
                0.66, 0.33, 0.99,
                0.24, 0.35, 0.59,
                0.37, 0.24, 0.61,
                0.41, 0.07, 0.48,
                0.7, 0.16, 0.86,
                0.23, 0.76, 0.99,
                0.41, 0.5, 0.91,
                0.85, 0.04, 0.89,
                0.25, 0.52, 0.77,
                0.3, 0.15, 0.45,
                0.02, 0.3, 0.32,
                0.35, 0.16, 0.51,
                0.49, 0.14, 0.63,
                0.06, 0.89, 0.95,
                0.81, 0.18, 0.99,
                0.04, 0.28, 0.32,
                0.41, 0.22, 0.63,
                0.74, 0.18, 0.92,
                0.64, 0.19, 0.83,
                0.69, 0.0, 0.69,
                0.86, 0.06, 0.92,
                0.31, 0.65, 0.96,
                0.44, 0.22, 0.66,
                0.35, 0.25, 0.60,
                0.44, 0.41, 0.85,
                0.08, 0.59, 0.67,
                0.49, 0.15, 0.64,
                0.02, 0.63, 0.65,
                0.5, 0.11, 0.61,
                0.68, 0.01, 0.69,
                0.34, 0.61, 0.95,
                0.04, 0.34, 0.38,
                0.8, 0.06, 0.86,
                0.64, 0.31, 0.95,
                0.36, 0.08, 0.44,
                0.69, 0.11, 0.80,
                0.39, 0.05, 0.44,
                0.15, 0.39, 0.54,
                0.47, 0.39, 0.86,
                0.26, 0.55, 0.81,
                0.36, 0.6, 0.96,
                0.56, 0.34, 0.90,
                0.36, 0.08, 0.44,
                0.05, 0.24, 0.29,
                0.43, 0.35, 0.78,
                0.28, 0.69, 0.97,
                0.43, 0.13, 0.56,
                0.28, 0.64, 0.92,
                0.6, 0.17, 0.77,
                0.37, 0.62, 0.99,
                0.69, 0.22, 0.91,
                0.8, 0.1, 0.90,
                0.03, 0.46, 0.49,
                0.09, 0.69, 0.78,
                0.13, 0.51, 0.64,
                0.47, 0.06, 0.53,
                0.84, 0.13, 0.97,
                0.32, 0.42, 0.74,
                0.59, 0.31, 0.90,
                0.33, 0.63, 0.96,
                0.22, 0.08, 0.30,
                0.03, 0.8, 0.83,
                0.33, 0.42, 0.75,
                0.59, 0.14, 0.73,
                0.25, 0.26, 0.51,
                0.13, 0.78, 0.91,
                0.0, 0.74, 0.74,
                0.54, 0.19, 0.73,
                0.09, 0.54, 0.63,
                0.37, 0.34, 0.71,
                0.01, 0.85, 0.86,
                0.24, 0.26, 0.50,
                0.05, 0.34, 0.39,
                0.42, 0.29, 0.71,
                0.06, 0.61, 0.67,
                0.49, 0.49, 0.98,
                0.09, 0.22, 0.31,
                0.31, 0.48, 0.79,
                0.74, 0.04, 0.78,
                0.21, 0.09, 0.30,
                0.53, 0.11, 0.64,
                0.17, 0.55, 0.72,
                0.64, 0.25, 0.89,
                0.13, 0.64, 0.77,
                0.31, 0.56, 0.87,
                0.62, 0.36, 0.98,
                0.02, 0.94, 0.96,
                0.06, 0.43, 0.49,
                0.0, 0.09, 0.09,
                0.34, 0.0, 0.34,
                0.09, 0.06, 0.15,
                0.18, 0.42, 0.60,
                0.4, 0.37, 0.77,
                0.71, 0.09, 0.80,
                0.24, 0.69, 0.93,
                0.04, 0.32, 0.36,
                0.4, 0.26, 0.66,
                0.01, 0.67, 0.68,
                0.73, 0.23, 0.96,
                0.59, 0.38, 0.97,
                0.69, 0.05, 0.74,
                0.22, 0.24, 0.46,
                0.64, 0.29, 0.93,
                0.76, 0.06, 0.82,
                0.63, 0.26, 0.89,
                0.65, 0.17, 0.82,
                0.01, 0.97, 0.98,
                0.54, 0.08, 0.62,
                0.02, 0.86, 0.88,
                0.4, 0.1, 0.50,
                0.61, 0.31, 0.92,
                0.03, 0.17, 0.20,
                0.03, 0.73, 0.76,
                0.07, 0.91, 0.98,
                0.31, 0.13, 0.44,
                0.08, 0.65, 0.73,
                0.13, 0.77, 0.90,
                0.01, 0.86, 0.87,
                0.01, 0.83, 0.84,
                0.18, 0.09, 0.27,
                0.11, 0.51, 0.62,
                0.72, 0.17, 0.89,
                0.01, 0.55, 0.56,
                0.05, 0.76, 0.81,
                0.93, 0.05, 0.98,
                0.48, 0.22, 0.70,
                0.65, 0.17, 0.82,
                0.25, 0.57, 0.82,
                0.44, 0.07, 0.51,
                0.32, 0.66, 0.98,
                0.34, 0.42, 0.76,
                0.19, 0.5, 0.69,
                0.34, 0.37, 0.71,
                0.44, 0.33, 0.77,
                0.43, 0.54, 0.97,
                0.08, 0.87, 0.95,
                0.41, 0.45, 0.86,
                0.67, 0.07, 0.74,
                0.46, 0.52, 0.98,
                0.44, 0.37, 0.81,
                0.16, 0.17, 0.33,
                0.1, 0.14, 0.24,
                0.16, 0.41, 0.57,
                0.73, 0.24, 0.97,
                0.09, 0.56, 0.65,
                0.59, 0.25, 0.84,
                0.47, 0.1, 0.57,
                0.25, 0.27, 0.52,
                0.91, 0.0, 0.91,
                0.69, 0.18, 0.87,
                0.23, 0.1, 0.33,
                0.07, 0.52, 0.59,
                0.94, 0.03, 0.97,
                0.12, 0.17, 0.29,
                0.26, 0.31, 0.57,
                0.12, 0.57, 0.69,
                0.32, 0.58, 0.90,
                0.23, 0.11, 0.34,
                0.19, 0.4, 0.59,
                0.52, 0.11, 0.63,
                0.26, 0.46, 0.72,
                0.37, 0.45, 0.82,
                0.57, 0.31, 0.88,
                0.79, 0.12, 0.91,
                0.41, 0.37, 0.78,
                0.03, 0.13, 0.16,
                0.61, 0.36, 0.97,
                0.61, 0.07, 0.68,
                0.0, 0.32, 0.32,
                0.55, 0.05, 0.60,
                0.4, 0.45, 0.85,
                0.19, 0.58, 0.77,
                0.18, 0.39, 0.57,
                0.57, 0.38, 0.95,
                0.39, 0.35, 0.74,
                0.39, 0.03, 0.42,
                0.25, 0.02, 0.27,
                0.14, 0.72, 0.86,
                0.21, 0.04, 0.25,
                0.25, 0.0, 0.25,
                0.32, 0.62, 0.94,
                0.11, 0.67, 0.78,
                0.03, 0.55, 0.58,
                0.24, 0.65, 0.89,
                0.44, 0.19, 0.63,
                0.33, 0.65, 0.98,
                0.27, 0.39, 0.66,
                0.69, 0.12, 0.81,
                0.53, 0.37, 0.90,
                0.4, 0.27, 0.67,
                0.27, 0.27, 0.54,
                0.23, 0.52, 0.75,
                0.48, 0.2, 0.68,
                0.64, 0.32, 0.96,
                0.06, 0.11, 0.17,
                0.09, 0.41, 0.50,
                0.1, 0.19, 0.29,
                0.19, 0.05, 0.24,
                0.23, 0.35, 0.58,
                0.45, 0.47, 0.92,
                0.61, 0.26, 0.87,
                0.02, 0.25, 0.27,
                0.29, 0.4, 0.69,
                0.11, 0.25, 0.36,
                0.15, 0.44, 0.59,
                0.46, 0.34, 0.80,
                0.86, 0.03, 0.89,
                0.71, 0.2, 0.91,
                0.65, 0.08, 0.73,
                0.33, 0.05, 0.38,
                0.61, 0.04, 0.65,
                0.16, 0.76, 0.92,
                0.1, 0.76, 0.86,
                0.45, 0.05, 0.50,
                0.59, 0.17, 0.76,
                0.22, 0.25, 0.47,
                0.37, 0.03, 0.40,
                0.42, 0.38, 0.80,
                0.21, 0.33, 0.54,
                0.4, 0.23, 0.63,
                0.19, 0.7, 0.89,
                0.06, 0.49, 0.55,
                0.03, 0.22, 0.25,
                0.15, 0.34, 0.49,
                0.29, 0.6, 0.89,
                0.1, 0.1, 0.20,
                0.86, 0.08, 0.94,
                0.08, 0.25, 0.33,
                0.49, 0.36, 0.85,
                0.03, 0.17, 0.20,
                0.41, 0.31, 0.72,
                0.32, 0.23, 0.55,
                0.0, 0.15, 0.15,
                0.4, 0.29, 0.69,
                0.35, 0.64, 0.99,
                0.39, 0.47, 0.86,
                0.32, 0.5, 0.82,
                0.84, 0.05, 0.89,
                0.22, 0.59, 0.81,
                0.4, 0.13, 0.53,
                0.28, 0.54, 0.82,
                0.11, 0.72, 0.83,
                0.48, 0.09, 0.57,
                0.48, 0.35, 0.83,
                0.13, 0.33, 0.46,
                0.37, 0.1, 0.47,
                0.52, 0.22, 0.74,
                0.02, 0.52, 0.54,
                0.47, 0.52, 0.99,
                0.66, 0.14, 0.80,
                0.31, 0.33, 0.64,
                0.17, 0.26, 0.43,
                0.37, 0.31, 0.68,
                0.01, 0.01, 0.02,
                0.36, 0.53, 0.89,
                0.04, 0.03, 0.07,
                0.02, 0.66, 0.68,
                0.13, 0.34, 0.47,
                0.25, 0.32, 0.57,
                0.33, 0.62, 0.95,
                0.87, 0.06, 0.93,
                0.32, 0.57, 0.89,
                0.08, 0.1, 0.18,
                0.33, 0.03, 0.36,
                0.19, 0.48, 0.67,
                0.34, 0.49, 0.83,
                0.01, 0.24, 0.25,
                0.22, 0.01, 0.23,
                0.26, 0.64, 0.90,
                0.07, 0.62, 0.69,
                0.45, 0.01, 0.46,
                0.51, 0.35, 0.86,
                0.4, 0.55, 0.95,
                0.66, 0.16, 0.82,
                0.21, 0.64, 0.85,
                0.51, 0.32, 0.83,
                0.68, 0.13, 0.81,
                0.09, 0.25, 0.34,
                0.23, 0.52, 0.75,
                0.07, 0.62, 0.69,
                0.5, 0.45, 0.95,
                0.27, 0.69, 0.96,
                0.16, 0.21, 0.37,
                0.31, 0.65, 0.96,
                0.3, 0.24, 0.54,
                0.45, 0.02, 0.47,
                0.47, 0.15, 0.62,
                0.49, 0.43, 0.92,
                0.25, 0.52, 0.77,
                0.67, 0.03, 0.70,
                0.09, 0.12, 0.21,
                0.79, 0.04, 0.83,
                0.23, 0.33, 0.56,
                0.28, 0.57, 0.85,
                0.35, 0.0, 0.35,
                0.58, 0.38, 0.96,
                0.08, 0.59, 0.67,
                0.63, 0.18, 0.81,
                0.04, 0.36, 0.40,
                0.28, 0.53, 0.81,
                0.08, 0.28, 0.36,
                0.03, 0.93, 0.96,
                0.61, 0.03, 0.64,
                0.18, 0.45, 0.63,
                0.34, 0.03, 0.37,
                0.48, 0.29, 0.77,
                0.28, 0.59, 0.87,
                0.19, 0.33, 0.52,
                0.73, 0.22, 0.95,
                0.1, 0.88, 0.98,
                0.79, 0.17, 0.96,
                0.26, 0.21, 0.47,
                0.17, 0.77, 0.94,
                0.47, 0.18, 0.65,
                0.04, 0.54, 0.58,
                0.31, 0.46, 0.77,
                0.67, 0.31, 0.98,
                0.01, 0.2, 0.21,
                0.39, 0.24, 0.63,
                0.14, 0.33, 0.47,
                0.25, 0.28, 0.53,
                0.18, 0.43, 0.61,
                0.49, 0.47, 0.96,
                0.5, 0.07, 0.57,
                0.08, 0.64, 0.72,
                0.39, 0.32, 0.71,
                0.48, 0.14, 0.62,
                0.12, 0.48, 0.60,
                0.05, 0.65, 0.70,
                0.39, 0.6, 0.99,
                0.73, 0.19, 0.92,
                0.61, 0.36, 0.97,
                0.04, 0.7, 0.74,
                0.34, 0.16, 0.50,
                0.07, 0.72, 0.79,
                0.06, 0.56, 0.62,
                0.21, 0.78, 0.99,
                0.28, 0.4, 0.68,
                0.11, 0.06, 0.17,
                0.24, 0.75, 0.99,
                0.29, 0.37, 0.66,
                0.45, 0.41, 0.86,
            };
            int trainingDataSetLength = 3;

            // Init weights
            initWeights(W1, dIn, d1);
            initWeights(W2, d1, dOut);
            b1[0] = 1.0;
            b1[1] = 1.0;
            b1[2] = 1.0;
            b2[0] = 1.0;
            //W1[0] = 0.3;
            //W1[1] = 0.2;
            //W1[2] = 0.8;
            //W1[3] = 0.9;
            //W1[4] = 0.5;
            //W1[5] = 0.1;
            //W2[0] = 0.2;
            //W2[1] = 0.3;
            //W2[2] = 0.8;

            int trainingDataSets = trainingData.Length / trainingDataSetLength;
            double averageError = 1.0;
            //int epoch = 0;
            for (int epoch = 1; epoch <= epochs; ++epoch) {
                //while (averageError > errorTarget) {
                //++epoch;

                // Print epoch and weights information.
                debug("*** Epoch " + epoch + " ***");
                debug("W1:");
                print(W1, d1);
                debug("W2:");
                print(W2, dOut);
                debug("b1:");
                print(b1, d1);
                debug("b2:");
                print(b2, dOut);

                // Calculate and print average error.
                double errorSum = 0;
                for (int trainingDataSet = 0; trainingDataSet < trainingDataSets; ++trainingDataSet) {
                    int startIndex = trainingDataSet * trainingDataSetLength;
                    double[] x = new double[] { trainingData[startIndex], trainingData[startIndex + 1] };
                    double y = f(x);
                    double t = trainingData[startIndex + 2];
                    double E = y - t;
                    errorSum += (E >= 0 ? E : -E);
                }
                averageError = errorSum / trainingDataSets;
                debug("Average error = " + averageError);

                for (int trainingDataSet = 0; trainingDataSet < trainingDataSets; ++trainingDataSet) {
                    int startIndex = trainingDataSet * trainingDataSetLength;
                    double[] x = new double[] {trainingData[startIndex], trainingData[startIndex + 1]};
                    // Forward pass: calculate output with current weights
                    double y = f(x);
                    // Target output
                    double t = trainingData[startIndex + 2];

                    // Calculate stochastic gradient descent.
                    // Online weights update.
                    calcAndUpdateWeights(x, y, t, false);

                    // Batch update, part 1
                    // Didn't get XOR approximation to work with batch update.
                    //calcAndUpdateWeights(x, y, t, true);

                    debug("x:");
                    print(x, dIn);
                    debug("y = f(x) = " + y);
                    debug("t = " + t);
                }

                // Batch update, part 2
                //updateWeightsBatch();
            }

            Console.WriteLine("Result after " + epochs + " epochs:");
            for (int trainingDataSet = 0; trainingDataSet < trainingDataSets; ++trainingDataSet) {
                int startIndex = trainingDataSet * trainingDataSetLength;
                double[] x = new double[] { trainingData[startIndex], trainingData[startIndex + 1] };
                double y = f(x);
                double t = trainingData[startIndex + 2];
                Console.WriteLine("x:");
                print(x, dIn, true);
                Console.WriteLine("y = f(x) = " + y);
                Console.WriteLine("t = " + t);
            }
            Console.WriteLine("Average error = " + averageError);

            double[] xTest = new double[] { 0.15, 0.8 };
            print(xTest, dIn, true);
            Console.WriteLine(f(xTest));
        }

        // Forward pass (calculate output)
        // g(g(x * W1 + b1) * W2 + b2)
        //
        // TODO: Apply g() to output as well? They do it in the tutorial
        // at https://www4.rgu.ac.uk/files/chapter3%20-%20bp.pdf.
        // Changes the results: Big jump in the first step, but takes longer
        // to be really precise, e.g. p20 example, get to 0.5000xxxxxxx:
        // Without g(): epoch 34
        // With g(): epoch 137
        // 
        // XOR results: Look a lot faster with g() applied.
        // Applying g() seems to make more than sense than not applying it.
        // But that's just me.
        private static double f(double[] x) {
            hiddenLayerOutput = g(add(multiply(x, W1, 1, dIn, d1), b1, 1, d1));
            return g(add(multiply(hiddenLayerOutput, W2, 1, d1, dOut), b2, 1, dOut))[0];
        }

        // ReLU
        // x = vector
        //private static double[] g(double[] x) {
        //    double[] y = new double[x.Length];
        //    for (int i = 0; i < x.Length; ++i) {
        //        y[i] = x[i] < 0 ? 0 : x[i];
        //    }
        //    return y;
        //}

        // Activation function
        // Logistic function / sigmoid
        // x = vector
        private static double[] g(double[] x) {
            double[] y = new double[x.Length];
            for (int i = 0; i < x.Length; ++i) {
                y[i] = 1 / (1 + Math.Pow(Math.E, -x[i]));
            }
            return y;
        }

        // Hinge (binary)
        //private static double L(double y, double t) {
        //    double loss = 1 - y * t;
        //    return loss < 0 ? 0 : loss;
        //}

        private static void initWeights(double[] W, int rows, int columns) {
            xavierInit(W, rows, columns);
        }
        // Xavier initialization
        private static void xavierInit(double[] W, int rows, int columns) {
            Random r = new Random();
            double max = Math.Sqrt(6) / Math.Sqrt(rows + columns);
            double min = -max;
            double range = max - min;
            for (int i = 0; i < W.Length; ++i) {
                W[i] = r.NextDouble() * range + min;
            }
        }

        // Error function:
        // E = t – y
        // Using the derivative of the logistic function:
        // g(x) * (1 - g(x))
        // deltaOutput, deltaHidden, updateWeights based on:
        // https://www4.rgu.ac.uk/files/chapter3%20-%20bp.pdf p. 19
        private static double deltaOutput(double y, double t) {
            return y * (1 - y) * (t - y);
        }
        // Error function for hidden layer
        private static double deltaHidden(double dy, int i) {
            return hiddenLayerOutput[i] * (1 - hiddenLayerOutput[i]) * dy * W2[i];
        }
        // Calculate stochastic gradient descent.
        // caching = false: update weights online
        // caching = true: save weights to cache
        private static void calcAndUpdateWeights(double[] x, double y, double t, bool caching) {
            double[] myW1 = caching ? W1ChangeCache : W1;
            double[] myW2 = caching ? W2ChangeCache : W2;
            double[] myB1 = caching ? b1ChangeCache : b1;
            double[] myB2 = caching ? b2ChangeCache : b2;

            // Output layer error gradient
            double dy = deltaOutput(y, t);
            // W2 weights update
            for (int i = 0; i < myW2.Length; ++i) {
                myW2[i] += learningRate * dy * hiddenLayerOutput[i];
            }
            // b2 update
            for (int i = 0; i < myB2.Length; ++i) {
                myB2[i] += learningRate * dy;
            }

            // Hidden layer error gradient
            double[] dh = new double[d1];
            for (int i = 0; i < d1; ++i) {
                dh[i] = deltaHidden(dy, i);
            }
            // W1 weights update
            for (int i = 0; i < dIn; ++i) {
                for (int j = 0; j < d1; ++j) {
                    // W1[i][j]
                    myW1[i * d1 + j] += learningRate * dh[j] * x[i];
                }
            }
            // b1 update
            for (int i = 0; i < myB1.Length; ++i) {
                myB1[i] += learningRate * dh[i];
            }
        }
        // Apply cached weight changes, reset cache.
        private static void updateWeightsBatch() {
            for (int i = 0; i < W1.Length; ++i) {
                W1[i] += W1ChangeCache[i];
            }
            for (int i = 0; i < W2.Length; ++i) {
                W2[i] += W2ChangeCache[i];
            }
            initW1ChangeCache();
            initW2ChangeCache();
        }
        // Reset W1 cache.
        private static double[] initW1ChangeCache() {
            return new double[dIn * d1];
        }
        // Reset W2 cache.
        private static double[] initW2ChangeCache() {
            return new double[d1 * dOut];
        }
        // Reset b1 cache.
        private static double[] initB1ChangeCache() {
            return new double[d1];
        }
        // Reset b2 cache.
        private static double[] initB2ChangeCache() {
            return new double[dOut];
        }

        // TODO in-situ would be faster
        private static double[] add(double[] A, double[] B, int rows, int columns) {
            double[] C = new double[rows * columns];
            for (int i = 0; i < rows; ++i) {
                for (int j = 0; j < columns; ++j) {
                    int index = i * columns + j;
                    C[index] = A[index] + B[index];
                }
            }
            return C;
        }

        // A = n x m row-major matrix / vector
        // B = m x p row-major matrix / vector
        // AB = n x p row-major matrix / vector
        private static double[] multiply(double[] A, double[] B, int n, int m, int p) {
            double[] AB = new double[n * p];
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < p; ++j) {
                    double sum = 0;
                    for (int k = 0; k < m; ++k) {
                        // A[i][k] * B[k][j]
                        sum += A[i * m + k] * B[k * p + j];
                    }
                    // AB[i][j]
                    AB[i * p + j] = sum;
                }
            }
            return AB;
        }

        private static void print(double[] M, int columns, bool ignoreDebugMode = false) {
            if (debugMode || ignoreDebugMode) {
                for (int i = 0; i < M.Length; ++i) {
                    Console.Write(M[i] + ", ");
                    if (i % columns == (columns - 1)) {
                        Console.WriteLine();
                    }
                }
            }
        }

        private static void debug(string s) {
            if (debugMode) {
                Console.WriteLine(s);
            }
        }

        private static void addTest() {
            double[] A = new double[] { 1, 2, 3, 7, 8, 9 };
            double[] B = new double[] { 5, 6, 7, 3, 4, 5 };
            // Expected result:
            //  6  8 10
            // 10 12 14
            double[] C = add(A, B, 2, 3);
            print(C, 3);
        }
        private static void multiplyTest() {
            double[] A = new double[] { 1, 4, 6 };
            double[] B = new double[] { 2, 3, 5, 8, 7, 9 };
            // Expected result: (64, 89)
            double[] AB = multiply(A, B, 1, 3, 2);
            foreach (double d in AB) {
                Console.Write(d + ", ");
            }
        }
    }
}
